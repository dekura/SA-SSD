'''
@Author: Guojin Chen
@Date: 2020-06-20 10:15:20
LastEditTime: 2021-01-06 19:23:14
@Contact: cgjhaha@qq.com
@Description: transfer the polygons to the velodyne
'''
import numpy as np
from .consts import STEP
'''
@description: transfer the polygons to the velodyne
@param {type}
    args argparse.args
    polys polysets
@return:
    save the velodyne.

example of velodyne:
31.706 0.053 1.281 0.22
31.952 0.154 1.29 0.19
32.167 0.206 1.297 0.28
32.316 0.309 1.302 0.26
32.745 0.416 1.316 0.21
'''



def _ck_vertical(start, end):
    if start[0] == end[0]:
        return True
    else:
        return False

'''
@input: start, end
@output: a set of points
'''
def se2vels(s, e):
    # print('s:',s)
    # print('e:',e)
    vels = np.array([])
    for z_i in [0.1]:
        if _ck_vertical(s, e):
            big = max(s[1], e[1])
            small = min(s[1], e[1])
            y = np.arange(small, big, STEP)
            # print('y:', y)
            x = np.linspace(s[0], e[0], y.shape[0])
            # print('x:', x)
            z = np.zeros(y.shape[0])
            # print('z:', z)
            z[:] = z_i
            # alpha = np.random.rand(y.shape[0])
        else:
            big = max(s[0], e[0])
            small = min(s[0], e[0])
            x = np.arange(small, big, STEP)
            # print('x:', x)
            y = np.linspace(s[1], e[1], x.shape[0])
            z = np.zeros(x.shape[0])
            z[:] = z_i
        alpha = np.random.rand(x.shape[0])
        vel = np.row_stack((x, y, z, alpha))
        vel = vel.T
        # print('vel: \n', vel)
        if vels.shape[0] > 0:
            vels = np.concatenate((vels, vel), axis=0)
        else:
            vels = vel
    # print(vels)
    return vels



'''
polys: [
    points: [x, y]
    ...
]
'''
def _polys2vels(polys):
    vels = np.array([])
    # print(polys)
    for i in range(len(polys) - 1):
        # if i>1:
            # break
        start = polys[i]
        end = polys[i+1]
        if vels.shape[0] > 0:
            vels = np.concatenate((vels, se2vels(start, end)), axis=0)
        else:
            vels = se2vels(start, end)
    # add the end to start
    start = polys[len(polys) - 1]
    end = polys[0]
    vels = np.concatenate((vels, se2vels(start, end)), axis=0)
    return vels





'''
here the polysets are generated by the polygons from the base gds wire
polysets: [
    polys:[],
    polys: ...
]
'''
def polys2vels(polysets):
    velsets = np.array([])
    for polys in polysets:
        vels = _polys2vels(polys)
        if velsets.shape[0] > 0:
            velsets = np.concatenate((velsets, vels))
        else:
            velsets = vels
        # break
    return velsets


def check_in_poly(vel, poly):
    x, y, _, _ = vel
    # print('x: ', x)
    # print('y: ', y)
    x_min = poly[0][0]
    # print('x min ', x_min)
    x_max = poly[2][0]
    # print('x max ', x_max)
    y_min = poly[0][1]
    y_max = poly[2][1]
    if x >= x_min and x<=x_max and y>=y_min and y<=y_max:
        return True
    else:
        return False

'''
check whether the vel in any of the hsd polys
'''
def check_vel_in_hsd_polys(vel, hsd_polys):
    in_poly = False
    for poly in hsd_polys:
        # print(vel, poly)
        # print('vel is: ', vel)
        # print('poly is: ', poly)
        in_poly = check_in_poly(vel, poly)
        if in_poly:
            return in_poly
    return in_poly


'''
input:
    vel: x, y, z, t
output:
    vel plus: x, y, [z...], t
'''
def plus_vel_height(vel):
    vel_plus = np.array([])
    for z_i in np.arange(0.2, 1.1, 0.1):
        tmp = [vel[0], vel[1], z_i, np.random.rand()]
        if vel_plus.shape[0] == 0:
            vel_plus = np.array([tmp])
            # print(vel_plus.shape)
        else:
            # vel_plus = np.append(vel_plus, tmp)
            print(vel_plus.shape)
            vel_plus = np.concatenate((vel_plus, np.array([tmp])))
    return vel_plus





'''
if vel.x, vel.y in hsd_polys:
    add the vel's height
return vel_plus
'''
def add_vel_height(vel, hsd_polys):
    if check_vel_in_hsd_polys(vel, hsd_polys):
        vel_plus = plus_vel_height(vel)
        return vel_plus
    else:
        return None

'''
Here we transfer the hotspots polygons to the velsets
Note that, the gds polys in the hotspots polygons, will get 1.0 height

wire_vels
    x, y, z, t
'''
def hsd_polys2vels(hsd_polys, wire_vels):
    hsd_velsets = np.array([])
    for vel in wire_vels:
        vel_plus = add_vel_height(vel, hsd_polys)
        # print(vel_plus)
        if vel_plus is not None:
            if hsd_velsets.shape[0] == 0:
                hsd_velsets = vel_plus
            else:
                hsd_velsets = np.concatenate((hsd_velsets,vel_plus))
    return hsd_velsets
        # if check_vel_in_hsd_polys(vel, hsd_polys):
    # for polys in hsd_polys:
    #     vels = _polys2vels(polys)
    #     if velsets.shape[0] > 0:
    #         velsets = np.concatenate((velsets, vels))
    #     else:
    #         velsets = vels
        # break
    # return velsets





def save_vels(velsets, gds_name, args):
    vel_name = gds_name + '.bin'
    txt_name = gds_name + '.txt'
    vel_path = args.kitti_vel_dir / vel_name
    txt_path = args.kitti_txt_dir / txt_name
    velsets[:, 0] = velsets[:, 0]/100
    velsets[:, 1] = velsets[:, 1]/100
    velsets = velsets.astype(np.float32)
    velsets.tofile(vel_path)
    np.savetxt(txt_path, velsets, fmt='%.3f')